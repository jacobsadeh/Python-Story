import pygame as pgimport gamebox as gbimport randomimport timeimport resource"""This program is for a side-scrolling platform game with varying levels and, thus far, two classes of enemies. Afterkilling the five smaller enemies, the boss may be apprehended in order to move to the next stage."""######################################################################################################################## Checkpoint 1## Here we have a side-scroll type game, where it has hints from multiple different games. We already designed a majority# of the game as seen below, it all should work on any computer except for the music (going to figure out how to# upload that to be used externally but we'll see if that's possible. The premise of the game is a character has levels,# experience, and a weapon to go through different rooms. The first room is what we have so farâ€”a woods-type room, with# the skeleton as the enemy. Every kill is 10 exp, 50 exp to level up, and each room is 3 levels. 1-3 is woods, 3-6 is# TBD, 6-9 is TBD, and 10 is a boss that will award 50 exp and will cause an end-game win (like Bowser, if you want# to relate this to mario. So far we have user input (up arrow, right arrow, left arrow, space, and will soon have e# for equipment [potions, maybe?]). Graphics are seen. Start screen is implemented but hidden until we finish the# entirety of the game. "Small enough window" is used. As for optional features, we implemented a multitude of# animations, we will have different (moving) enemies that will hit and can be hit. Collectibles we will have but have# not determined, possibly potions for health or coins for extra exp. The level scrolls. We might implement a timer# so as that you must finish each room in time. Health meter is implemented. There will be multiple levels. We might# do a save point, but we have to discuss that and debate on whether it is useful. Not sure if anything we've done# so far constitutes as "something more" but we've got a pretty robust code thus far.######################################################################################################################## Checkpoint 2## I finally got to speak to Luther today, he explained to me how to fix the few bugs we have. We couldn't figure out# how to physically hit the monsters from a distance, fix their flip() movement, and fix the animations# (pressing one button to go through an entire animation). As of now those are our only bugs. Once we complete that we# will quickly finish the levels portion, and then add collectibles and possible a save point. The game is nearly# complete and should be done by this Sunday (December 2).######################################################################################################################## Checkpoint 3, Final Game## Following my meeting with Luther we figured out the rest of the bugs, added music, added a second level (with new# monsters, bosses, floors, backgrounds, etc) fixed the level system (with exp) and essentially finalized each and# every kink the game was dealing at us. Used Photoshop to implement a pretty cool (in our opinion) start screen.## Our final game includes:#     Required;##     User Input (b to start, up, down, left, right, space)#     Graphics / Images (a lot (a lot) of pictures)#     Start Screen (used photoshop, looks pretty cool, tbh)#     Small Enough Window (is 800, 600)##     Optional;##     Animation (this was a pain, have a lot of it though)#     Enemies (four sets of enemies; skeletrooper, the boss trooper, fangs, and the boss yeti)#     Scrolling Level (pretty big level tbh)#     Health Meter (self-explained)#     Mutliple Levels (only two for now, but give us more time, we'll have more)#     Something More (Exp, levels, 'level up' pops up when you level, changing backgrounds, music, anything else?)######################################################################################################################## Notes# Thank you for this class, and thank you for the opportunity to make a game like this.# Please grade us nicely, we put a lot of time and effort into this :)# And, don't forget: kill the bosses last!!! ###@@@###@@@###@@@###@@@###@@@# ** the snow enemies may moonwalk in the second level, this is all part of the plan.# *** also i think the music is copyright-free but if not we aren't making any money off this and we're doing that# youtube statement of *we dont own any of this music!!*#######################################################################################################################pg.mixer.pre_init(44100, 16, 2, 4096)pg.init()# start_music = "/Users/jacobsadeh/Downloads/python_story/start_music.wav"# background_music = "/Users/jacobsadeh/Downloads/python_story/python_music.wav"hit_sound = "/Users/jacobsadeh/Downloads/python_story/Hit.wav"# snow_music = "/Users/jacobsadeh/Downloads/python_story/snow_music.wav"end_music = "/Users/jacobsadeh/Downloads/python_story/end_game.wav"pg.mixer.music.load(end_music)pg.mixer.music.set_volume(.7)pg.mixer.music.play(-1)camera = gb.Camera(800, 600)game = "off"start_screen = gb.from_image(camera.x, camera.y, "https://bit.ly/2ruSYaV")stand_right = gb.load_sprite_sheet("https://bit.ly/2RbNzAH", 4, 1)walk_right = gb.load_sprite_sheet("https://bit.ly/2An2tg4", 5, 1)walk_left = gb.load_sprite_sheet("https://bit.ly/2r5hWNI", 5, 1)hit_right = gb.load_sprite_sheet("https://bit.ly/2Racwwk", 3, 2)jump_right = gb.load_sprite_sheet("https://bit.ly/2qZcVpY", 2, 1)hit_left = gb.load_sprite_sheet("https://bit.ly/2QpqKMR", 3, 2)stand_left = gb.load_sprite_sheet("https://bit.ly/2PR6UdD", 4, 1)jump_left = gb.load_sprite_sheet("https://bit.ly/2Bukwme", 2, 1)"""The above chunk defines gameboxes for different states of the player character."""stand_frame = 0walk_frame = 0hit_frame = 0jump_frame = 0frame = 0jumpstop=0jumpstop2=0sklistn=''design = 1character = gb.from_image(camera.x, 540, stand_right[frame])floor_design = "https://bit.ly/2Kp4VaJ"if game == "on2":    floor_design = "https://bit.ly/2RAjhrv"floors = [    gb.from_image(120, 615, floor_design),    gb.from_image(570, 615, floor_design),    gb.from_image(1020, 615, floor_design),    gb.from_image(1470, 615, floor_design),    gb.from_image(-330, 615, floor_design),    gb.from_image(-780, 615, floor_design),    gb.from_image(-1230, 615, floor_design),    gb.from_image(-1680, 615, floor_design),    gb.from_image(-2130, 615, floor_design),    gb.from_image(-2580, 615, floor_design),    # Defines gameboxes for the floor    gb.from_image(1920, 615, floor_design),    gb.from_image(2370, 615, floor_design),    gb.from_image(2580, 615, floor_design),    gb.from_image(300, 350, floor_design),    gb.from_image(-300, 150, floor_design),    gb.from_image(-500, 400, floor_design),    gb.from_image(900, 400, floor_design),    gb.from_image(1200, 150, floor_design),    gb.from_image(1700, 250, floor_design),    gb.from_image(2580, 615, floor_design),    gb.from_image(2580, 615, floor_design),]floor_other = [gb.from_image(120, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(570, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(1020, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(1470, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(-330, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(-780, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(-1230, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(-1680, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(-2130, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(-2580, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(1920, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(2370, 615, "https://bit.ly/2RAjhrv"), # Defines gameboxes for floor in second level    gb.from_image(2580, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(300, 350, "https://bit.ly/2RAjhrv"),    gb.from_image(-300, 150, "https://bit.ly/2RAjhrv"),    gb.from_image(-500, 400, "https://bit.ly/2RAjhrv"),    gb.from_image(900, 400, "https://bit.ly/2RAjhrv"),    gb.from_image(1200, 150, "https://bit.ly/2RAjhrv"),    gb.from_image(1700, 250, "https://bit.ly/2RAjhrv"),    gb.from_image(2580, 615, "https://bit.ly/2RAjhrv"),    gb.from_image(2580, 615, "https://bit.ly/2RAjhrv")]background_design = "https://bit.ly/2PPmOVO"if game == "on2":    background_design = "https://bit.ly/2UdiQ88"backgrounds = [    gb.from_image(camera.x + 1309, camera.y, background_design),    gb.from_image(camera.x, camera.y, background_design),    gb.from_image(camera.x - 1310.4, camera.y, background_design),    gb.from_image(camera.x - 2620.3, camera.y, background_design),  # Defines gameboxes for background    gb.from_image(camera.x + 2620.3, camera.y, background_design),]background_other = [    gb.from_image(camera.x + 1309, camera.y, "https://bit.ly/2UdiQ88"),    gb.from_image(camera.x, camera.y, "https://bit.ly/2UdiQ88"),    gb.from_image(camera.x - 1310.4, camera.y, "https://bit.ly/2UdiQ88"),    gb.from_image(camera.x - 2620.3, camera.y, "https://bit.ly/2UdiQ88"),    gb.from_image(camera.x + 2620.3, camera.y, "https://bit.ly/2UdiQ88"),    gb.from_image(camera.x + 300, camera.y, "https://bit.ly/2UdiQ88"),  # Defines gameboxes for background in lvl 2    gb.from_image(camera.x + 2000, camera.y, "https://bit.ly/2UdiQ88"),    gb.from_image(camera.x - 300, camera.y, "https://bit.ly/2UdiQ88"),    gb.from_image(camera.x - 2000, camera.y, "https://bit.ly/2UdiQ88"),]skeletrooper_walk = gb.load_sprite_sheet("https://bit.ly/2OT1B8l", 4, 1)skeletrooper_die = gb.load_sprite_sheet("https://i.imgur.com/40K6PdH.png", 2, 6)skeletrooper_hit = gb.load_sprite_sheet("https://bit.ly/2r0a0ND", 1, 1) # States of the skeletrooperskeletrooper_attack = gb.load_sprite_sheet("https://i.imgur.com/WlGsUa2.png", 1, 6)skeletrooper_1 = gb.from_image(-100, 55, skeletrooper_walk[0])skeletrooper_2 = gb.from_image(-300, 305, skeletrooper_walk[0])skeletrooper_3 = gb.from_image(1100, 305, skeletrooper_walk[0])skeletrooper_4 = gb.from_image(1400, 55, skeletrooper_walk[0])skeletrooper_5 = gb.from_image(1900, 155, skeletrooper_walk[0])"""This chunk initializes each small enemy as a gamebox in the same state (walking)."""boss = gb.load_sprite_sheet("https://i.imgur.com/u2HSo3L.png", 4, 1)"""The boss is the large enemy on each level, more difficult to kill than the smaller enemies."""skeletrooper = gb.from_image(500, 255, boss[0])yetis = gb.load_sprite_sheet("https://bit.ly/2rnCrFj", 1, 4)    # Second level bossfangs = gb.load_sprite_sheet("https://bit.ly/2AOJmvK", 3, 1)    # Second level enemyfang = gb.from_image(499, 225, yetis[0])fang_1 = gb.from_image(-100, 75, fangs[0])fang_2 = gb.from_image(-300, 325, fangs[0])fang_3 = gb.from_image(1100, 325, fangs[0]) # Second level enemiesfang_4 = gb.from_image(1400, 75, fangs[0])fang_5 = gb.from_image(1900, 175, fangs[0])allfang=[fang,fang_1,fang_2,fang_3,fang_4,fang_5]for enemy in allfang:    enemy.flip()    # Makes enemies face proper direction of movementhealth_bar = gb.load_sprite_sheet("https://bit.ly/2DHNJLY", 1, 5)health_frame = 0health = gb.from_image(camera.x - 280, 585, health_bar[health_frame])"""The health bar fluctuates when the character touches an enemy without attacking."""levels = 1exp = 0if exp >= 50:    levels += 1    exp = 0    """The player advances in level every 50 experience points."""level = gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold")experience_bar = gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow")direction = 1skeletrooper_health = 100skeletrooper_1_health = 30skeletrooper_2_health = 30skeletrooper_3_health = 30  # Health values for enemies in first levelskeletrooper_4_health = 30skeletrooper_5_health = 30"""Here we clearly differentiated the health values for the smaller, pawn-like enemies and the boss."""if skeletrooper_health <= 0 and skeletrooper_1_health <= 0 and skeletrooper_2_health <= 0:    if skeletrooper_3_health <= 0 and skeletrooper_4_health <= 0 and skeletrooper_5_health <= 0:        game = "on2"        """If all the enemies on the first stage has been killed, the character advances to the next stage."""character.yspeed = 0mspeed=8    # Movement speedmpos1=100design_test = Trueskel = Trueskel_1 = Trueskel_2 = Trueskel_3 = Trueskel_4 = Trueskel_5 = Truefung = Truefung_1 = Truefung_2 = Truefung_3 = Truefung_4 = Truefung_5 = Truefang_health = 100fang_1_health = 30fang_2_health = 30fang_3_health = 30fang_4_health = 30fang_5_health = 30if fang_health <= 0 and fang_1_health <= 0 and fang_2_health <= 0:    if fang_3_health <= 0 and fang_4_health <= 0 and fang_5_health <= 0:        game = "over"        """The game ends if all enemies on the second stage are killed."""def tick(keys):    """    The tick function essentially runs at thirty ticks per second and constantly checks for user inputs.    :param keys: Keys checks for the user inputs through pygame.    :return: Nothing is returned in this function.    """    global game, character, frame, hit_sound, background_music, health_frame, direction, skeletrooper_health    global stand_frame, walk_frame, hit_frame, jump_frame, level, levels, exp, skeletrooper_4_health    global frame, mspeed, skeletrooper_1_health, skeletrooper_2_health, skeletrooper_3_health    global skeletrooper_5_health, skel, skel_1, skel_2, skel_3, skel_4, skel_5, design    global floor_design,floor,floors,background,background_design,backgrounds,sklistn, design_test    global fang, fang_1, fang_2, fang_3, fang_4, fang_5, fung, fung_1, fung_2, fung_3, fung_4, fung_5    global fang_health, fang_1_health, fang_2_health, fang_3_health, fang_4_health, fang_5_health    global background_other, jumpstop, jumpstop2, start_music, end_music, snow_music    character.yspeed += 5    character.y = character.y + character.yspeed    if character.x >= 2365:        character.x -= 10    if character.x <= -1570:        character.x += 10    frame += 1    if frame == 2:  # Creates somewhat of an animation        frame = 0    if game == "off":        camera.draw(start_screen)    if pg.K_b in keys:        game = "on"        keys.clear()    if health_frame == 4:        game = "die"        """The character dies if four hits are taken."""    if game == "die":        camera.clear("white")        camera.draw(gb.from_text(camera.x, camera.y, "Oof, dead", 70, "red"))        pg.mixer.music.load(hit_sound)        pg.mixer.music.set_volume(.7)        pg.mixer.music.play()        gb.pause()    if skeletrooper_health <= 0 and skeletrooper_1_health <= 0 and skeletrooper_2_health <= 0:        if skeletrooper_3_health <= 0 and skeletrooper_4_health <= 0 and skeletrooper_5_health <= 0:            game = "on2"    if fang_health <= 0 and fang_1_health <= 0 and fang_2_health <= 0:        if fang_3_health <= 0 and fang_4_health <= 0 and fang_5_health <= 0:            game = "over"    if game == "over":        camera.clear("white")        camera.draw(gb.from_text(camera.x, camera.y, "Congrats! You Won! Try again when we have more time for more levels :)" , 30, "blue"))        gb.pause()    if game == "on":        print(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)        camera.clear("White")        camera.draw(character)        character.x = camera.x        while jumpstop==0:            character.y = 540            jumpstop+=1        for background in backgrounds:            camera.draw(background)        for floor in floors:            if character.bottom_touches(floor):                character.yspeed = 0                if pg.K_UP in keys:                    if direction == -1:                        character.image = jump_left[frame]                        character.image = jump_left[frame]                    else:                        character.image = jump_right[frame]                    character.yspeed = -55            if character.touches(floor):                character.move_to_stop_overlapping(floor)            if skeletrooper.touches(floor):                skeletrooper.move_to_stop_overlapping(floor)            camera.draw(floor)        camera.draw(skeletrooper)        camera.draw(skeletrooper)        sklist=[skeletrooper_1,skeletrooper_2,skeletrooper_3,skeletrooper_4,skeletrooper_5]        for trooper in sklist:            trooper.image=skeletrooper_walk[frame]            for trooper in sklist:                camera.draw(trooper)                """Makes the enemies appear in the game."""        for trooper in sklist:            trooper.x -= mspeed        skeletrooper.x-=mspeed        if skeletrooper.x <= 100 or skeletrooper.x >= 500:            mspeed = -mspeed            for trooper in sklist:  # Monster movement on platforms                trooper.flip()                skeletrooper.flip()        if (character.touches(skeletrooper) or            character.touches(skeletrooper_1) or character.touches(skeletrooper_2) or character.touches(skeletrooper_3)                    or character.touches(skeletrooper_4) or character.touches(skeletrooper_5)):            health_frame += 1            if direction == 1:                character.x -= 100            if direction == -1:                character.x += 100            health.image = health_bar[health_frame]            character.move_to_stop_overlapping(skeletrooper)            character.move_to_stop_overlapping(skeletrooper_1)            character.move_to_stop_overlapping(skeletrooper_2)            character.move_to_stop_overlapping(skeletrooper_3)            character.move_to_stop_overlapping(skeletrooper_4)            character.move_to_stop_overlapping(skeletrooper_5)            """This conditional ensures that the character and enemy gameboxes do not overlap and that the chracter            takes damage if touching a monster."""        if pg.K_RIGHT in keys:            character.image = walk_right[walk_frame]            if walk_frame == 4:                walk_frame = 0            walk_frame += 1            character.x += 10            camera.x = character.x  # Tethers HUD and camera to character horizontal movement            health.x = character.x - 280            level.x = character.x + 340            experience_bar.x = character.x            if direction == -1:                direction *= -1            else:                direction *= 1        elif pg.K_LEFT in keys:            character.image = walk_left[walk_frame]            if walk_frame == 4:                walk_frame = 0            walk_frame += 1            character.x -= 10            camera.x = character.x            health.x = character.x - 280    # Tethers HUD and camera to character horizontal movement            level.x = character.x + 340            experience_bar.x = character.x            if direction == -1:                direction *= 1            else:                direction *= -1        elif pg.K_SPACE in keys:            if direction == -1:                if character.touches(skeletrooper, 100, 100):                    character.image = hit_left[hit_frame]                    skeletrooper_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(skeletrooper_1, 100, 100):                    character.image = hit_left[hit_frame]                    skeletrooper_1_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(skeletrooper_2, 100, 100):                    character.image = hit_left[hit_frame]                    skeletrooper_2_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(skeletrooper_3, 100, 100):                    character.image = hit_left[hit_frame]                    skeletrooper_3_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(skeletrooper_4, 100, 100):                    character.image = hit_left[hit_frame]                    skeletrooper_4_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(skeletrooper_5, 100, 100):                    character.image = hit_left[hit_frame]                    skeletrooper_5_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                else:                    character.image = hit_left[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                """The above conditionals define the attack logic when the character is facing left."""            elif direction == 1:                if character.touches(skeletrooper, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    skeletrooper_health -= 10                if character.touches(skeletrooper_1, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    skeletrooper_1_health -= 10                if character.touches(skeletrooper_2, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    skeletrooper_2_health -= 10                if character.touches(skeletrooper_3, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    skeletrooper_3_health -= 10                if character.touches(skeletrooper_4, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    skeletrooper_4_health -= 10                if character.touches(skeletrooper_5, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    skeletrooper_5_health -= 10                    """The above conditionals define the attack logic when the character is facing right."""                else:                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                """This chunk deals with character attacks that do not hit an enemy."""        elif direction == -1:            character.image = stand_left[0-4]        else:            character.image = stand_right[0-4]        if skeletrooper_health <= 0:            if exp >= 50:                levels += 1                exp = 0            skeletrooper.x = 9000            if skeletrooper.x == 9000:                if skel:                    skel = not skel                    exp += 50                    pass            """The skeletroopers are moved far out of the game window when they die."""            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if skeletrooper_1_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            skeletrooper_1.x = 9000            if skeletrooper_1.x == 9000:                if skel_1:                    skel_1 = not skel_1                    exp += 10                    pass            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if skeletrooper_2_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            skeletrooper_2.x = 9000            if skeletrooper_2.x == 9000:                if skel_2:                    skel_2 = not skel_2                    exp += 10                    pass            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if skeletrooper_3_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            skeletrooper_3.x = 9000            if skeletrooper_3.x == 9000:                if skel_3:                    skel_3 = not skel_3                    exp += 10                    pass            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if skeletrooper_4_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            skeletrooper_4.x = 9000            if skeletrooper_4.x == 9000:                if skel_4:                    skel_4 = not skel_4                    exp += 10                    pass            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if skeletrooper_5_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            skeletrooper_5.x = 9000            if skeletrooper_5.x == 9000:                if skel_5:                    skel_5 = not skel_5                    exp += 10                    pass        else:            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "orange"))            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "orange"))        camera.draw(character)        camera.draw(health)    if game == "on2":        print(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss)        camera.clear("White")        camera.draw(character)        character.x = camera.x        while jumpstop2==0:            character.y = 540            jumpstop2+=1        design = 2        for other in background_other:            camera.draw(other)        for floor in floor_other:            if character.bottom_touches(floor):                character.yspeed = 0                if pg.K_UP in keys:                    if direction == -1:                        character.image = jump_left[frame]                    else:                        character.image = jump_right[frame]                    character.yspeed = -55            if character.touches(floor):                character.move_to_stop_overlapping(floor)            if skeletrooper.touches(floor):                skeletrooper.move_to_stop_overlapping(floor)            camera.draw(floor)        camera.draw(fang)        fglist = [fang_1, fang_2, fang_3, fang_4, fang_5]        for monsters in fglist:            monsters.image = fangs[frame]            for monsters in fglist:                camera.draw(monsters)            #monsters.flip()        for monsters in fglist:            monsters.x -= mspeed        fang.x -= mspeed        if fang.x <= 100 or fang.x >= 500:            mspeed = -mspeed            for monsters in fglist:                monsters.flip()                fang.flip()            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "orange"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "orange"))        else:            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "orange"))            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "orange"))        if (character.touches(fang) or                character.touches(fang_1) or character.touches(fang_2) or character.touches(                    fang_3)                or character.touches(fang_4) or character.touches(fang_5)):            health_frame += 1            if direction == 1:                character.x -= 100            if direction == -1:                character.x += 100            health.image = health_bar[health_frame]            character.move_to_stop_overlapping(fang)            character.move_to_stop_overlapping(fang_1)            character.move_to_stop_overlapping(fang_2)            character.move_to_stop_overlapping(fang_3)            character.move_to_stop_overlapping(fang_4)            character.move_to_stop_overlapping(fang_5)            """If the character touches the enemy, a bounceback effect takes place."""        if pg.K_RIGHT in keys:            character.image = walk_right[walk_frame]            if walk_frame == 4:                walk_frame = 0            walk_frame += 1            character.x += 10            camera.x = character.x            health.x = character.x - 280            level.x = character.x + 340            experience_bar.x = character.x            if direction == -1:                direction *= -1            else:                direction *= 1        elif pg.K_LEFT in keys:            character.image = walk_left[walk_frame]            if walk_frame == 4:                walk_frame = 0            walk_frame += 1            character.x -= 10            camera.x = character.x            health.x = character.x - 280            level.x = character.x + 340            experience_bar.x = character.x            if direction == -1:                direction *= 1            else:                direction *= -1        elif pg.K_SPACE in keys:            """This outlines how the character attacks."""            if direction == -1:                if character.touches(fang, 100, 100):                    character.image = hit_left[hit_frame]                    fang_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(fang_1, 100, 100):                    character.image = hit_left[hit_frame]                    fang_1_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(fang_2, 100, 100):                    character.image = hit_left[hit_frame]                    fang_2_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(fang_3, 100, 100):                    character.image = hit_left[hit_frame]                    fang_3_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(fang_4, 100, 100):                    character.image = hit_left[hit_frame]                    fang_4_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                if character.touches(fang_5, 100, 100):                    character.image = hit_left[hit_frame]                    fang_5_health -= 10                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                else:                    character.image = hit_left[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1            elif direction == 1: # While facing right, how the character attacks enemies on the second stage                if character.touches(fang, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    fang_health -= 10                if character.touches(fang_1, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    fang_1_health -= 10                if character.touches(fang_2, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    fang_2_health -= 10                if character.touches(fang_3, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    fang_3_health -= 10                if character.touches(fang_4, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    fang_4_health -= 10                if character.touches(fang_5, 100, 100):                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1                    fang_5_health -= 10                else:                    character.image = hit_right[hit_frame]                    if hit_frame == 3:                        hit_frame = 0                    hit_frame += 1        elif direction == -1:            character.image = stand_left[0 - 4]        else:            character.image = stand_right[0 - 4]        if fang_health <= 0:            if exp >= 50:                levels += 1                exp = 0            fang.x = 9000            if fang.x == 9000:                if fung:                    fung = not fung                    exp += 50                    pass            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if fang_1_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            fang_1.x = 9000            if fang_1.x == 9000:                if fung_1:                    fung_1 = not fung_1                    exp += 10                    pass            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if fang_2_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            fang_2.x = 9000            if fang_2.x == 9000:                if fung_2:                    fung_2 = not fung_2                    exp += 10                    pass            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if fang_3_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            fang_3.x = 9000            if fang_3.x == 9000:                if fung_3:                    fung_3 = not fung_3                    exp += 10                    pass            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if fang_4_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            fang_4.x = 9000            if fang_4.x == 9000:                if fung_4:                    fung_4 = not fung_4                    exp += 10                    pass            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "gold"))            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "yellow"))        if fang_5_health <= 0:            if exp >= 50:                levels += 1                camera.draw(gb.from_text(character.x, character.y - 20, "Level Up!", 30, "yellow"))                exp = 0            fang_5.x = 9000            if fang_5.x == 9000:                if fung_5:                    fung_5 = not fung_5                    exp += 10                    pass                    """The above six fang conditionals deal with the gamebox after the enemy is killed (+10                     experience points)"""        else:            camera.draw(gb.from_text(camera.x, 587, "Exp: " + str(exp) + "/50", 30, "orange"))            camera.draw(gb.from_text(camera.x + 340, 585, "Lvl " + str(levels), 30, "orange"))        camera.draw(character)        camera.draw(health)    camera.display()ticks_per_second = 30   # Game speedgb.timer_loop(ticks_per_second, tick)